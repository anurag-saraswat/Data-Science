# -*- coding: utf-8 -*-
"""ML Assignment1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V1KfsmUprwe1WDCLbsJ3yvXmK8wEgnSc

# Familiarization with Python Pandas library

### 1) Use Python lists and dictionaries. How to do slicing of lists using the colon (:) specifications.

#### Python List

-> List is one of the Sequence Data structure

-> Lists are collection of items (Strings, integers or even other lists)

-> Lists are enclosed in [ ]

-> Each item in the list has an assigned index value.

-> Each item in a list is separated by a comma

-> Lists are mutable, which means they can be changed.
"""

# Creation 
print("List")
print("\ncreation")

empty_List = []
lst = [1,2,3,4,5] # List of numbers
lst1 = [[1,2,3],[3,4,5]] # List of Lists
lst2 = [1,'a',2,'b'] #List of different data type

print(empty_List, lst, lst1, lst2, sep='\n')

# Append
print("\nAppend")

lst = [1,2,3]
lst.append(4) # Append will add item at the end
print(lst)

# Insert
print("\nInsert")
lst.insert(2,'Two') # Will add element 'Two' at location index 2
print(lst)

# Remove
print("\nRemove")
lst.remove('Two') # Remove first occurence of 'Two'
print(lst)

# List Slicing
# Accessing parts of segments is called slicing.
print("\nList Slicing")

lst = [0,1,2,3,4,5,6,7,8,9]

print(lst[:]) #Print all Elements

#Print Alternae Elements
print(lst[ : :2])

#Print Element from index 1(Included) to 3(Excluded)
print(lst[1:3])

#Reversing Element of list
print(lst[::-1])

"""#### Python Dictionary

Python dictionary is an unordered collection of items. While other compound data types have only value as an element, a dictionary has a pair.
"""

# Creation


print("\n\nDictionary")

#Creating Empty Dictionary
print('\nCreation')
Empty_dict = {}

#dictionary with integer keys
my_dict1 = {1: 'abc', 2: 'xyz'}

#dictionary with mixed keys
my_dict2 = {'name': 'Anurag', 1: ['abc', 'xyz']}

#create empty dictionary using dict()
my_dict3 = dict()

#create a dict with list of tuples
my_dict4 = dict([(1, 'abc'), (2, 'xyz')])    

print(Empty_dict, my_dict1, my_dict2, my_dict3, my_dict3, sep='\n')

# Access
print('\nAccess')
my_dict = {'Name': 'Anurag', 'Age': 23, 'Address': 'KOTA'}

#get attributes
print('Get Attributes')
print("Name is :",my_dict['Name'])
print("Age is :",my_dict['Age'])
print("Address is :",my_dict.get('Address')) #Another way of accessing Dictionary

# Add and Modify

print('\nUpdate Key')
# Update Key
my_dict['Name'] = 'Saraswat'

# Add New Key-Value Pair
my_dict['Degree'] = 'M.Tech'

print(my_dict)

# Remove Element
print('\nRemove element')
# remove a particular item
print(my_dict.pop('Age'))

del my_dict['Address']

# remove an arbitarty key
print(my_dict.popitem())

print(my_dict)

"""### 2) Create a DataFrame object from the data loaded from a dataset. 

### 3) Print various rows and columns of the dataset. 

### 4) Print a subset of rows and a subset of columns
"""
print('\n\n------------------------- Exploring Pandas---------------------\n')
# Import Pandas
import pandas as pd

# Reading Data from sample csv file provided in colab by default
# california_housing Data set

my_data = pd.read_csv('./sample_data/california_housing_test.csv')

print('----Displaying Data Set----')
print(my_data.head()) #By Default Print Data of first five rows

print('\n----Displays Columns----')
print(my_data.columns) #Displays Columns

# Accessing Data of particular row

print('\n----Accessing Data of 3rd row----')
print(my_data.iloc[3]) #Returning data of 3rd row

# Accessing data of particular row and column
print('\n----Print data of first 3 row and first column----')
print(my_data.iloc[3,1]) #Print data of first 3 row and first column

print('\n----Print data of first row and 1,2,3 column----')
print(my_data.iloc[3,[1,2,3]]) #Print data of first row and 1,2,3 column

# Slicing

print('\n----Slicing----')
my_data.iloc[:5,[1,2,3]] #Return data of first five row and first three column

# Creating new data frame from existing data frame
# Only data of longitude and latitude is present in new data frame
new_df = pd.DataFrame(my_data,columns=['longitude','latitude'])  
print(new_df.head())

"""### 5) How to group (aggregate) specific columns that correspond to certain specific values of rows. (use DataFrame.groupby())

Gouping above data i.e california_housing dataset on the basis of Housing Median Age and creating new data frame as new_df
"""

new_df = my_data.groupby(['housing_median_age'], as_index=False)

# Presenting Mean of Columns grouped by housing_median_age
print('\n--Presenting Mean of Columns grouped by housing_median_age--')
print(new_df.mean().head())

# Taking mean of total_rooms present in dataframe grouped by housing_median_age
print('\n--Taking mean of total_rooms present in dataframe grouped by housing_median_age--')
print(new_df[['total_rooms']].mean().head()) #By using double brackets it returns as data frame

#Presenting various stats of column total_rooms present in dataframe grouped by housing_median_age using aggregate function.
print('\n--resenting various stats of column total_rooms present in dataframe grouped by housing_median_age using aggregate function--')
my_stat = ['count','mean','max', 'min', 'sum']
print(new_df[['total_rooms']].agg(my_stat).head())

# Presenting mean of column total_rooms and max of column total_bedrooms present in dataframe grouped by housing_median_age
print('\n--Presenting mean of column total_rooms and max of column total_bedrooms present in dataframe grouped by housing_median_age--')
print(new_df.agg({'total_rooms': 'mean' , 'total_bedrooms' : 'max' }).head())

